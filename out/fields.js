!function(e){"use strict";e.module("fields",["utils","directive-proxy","ui.bootstrap"])}(window.angular),function(e){"use strict";function i(e,i,t){return i.generateDirective("div",function(l,o,n){o.addClass("field-multichoice");var c=e(n.choices)(l),a=t.parse(n.hints,{many:c.length>8,custom:!1,multi:!0});if(a.custom)throw new Error("Conflicting hints on choice field: multi, custom");var r=a.many?"multiselect-fixed-list":"checkbox-group";i("field:"+r,{hints:"copy"},l,o,n)})}e.module("fields").directive("fieldMultichoice",i),i.$inject=["$parse","directiveProxyService","hintParseService"]}(window.angular),function(e){"use strict";function i(e){return{restrict:"E",replace:!0,require:"ngModel",template:'<div class="field-autocomplete"><input class="autocomplete-text-box" type="text" typeahead="choice as choice.title for choice in choices | filter: { title: $viewValue } | limitTo: suggestions" ng-model="model.value" typeahead-on-select="onSelect($item, $model, $label)" typeahead-editable="editable"></div>',scope:{choices:"="},link:function(i,l,o,n){function c(){i.model.value=_(i.choices).findWhere({value:n.$viewValue})}function a(e){e&&n.$setViewValue(e.value),n.$setValidity("validSelection",!!e||r.optional)}var r=e.parse(o.hints,{custom:!1,optional:!1,show:t});i.model={value:null},n.$render=c,i.onSelect=a,c(),i.suggestions=parseInt(r.show),i.editable=r.custom}}}e.module("fields").directive("fieldAutocomplete",i);var t=8;i.$inject=["hintParseService"]}(window.angular),function(e){"use strict";function i(e,i,t){return i.generateDirective("div",function(l,o,n){o.addClass("field-choice");var c=e(n.choices)(l),a=t.parse(n.hints,{many:c.length>8,custom:!1,multi:!1}),r=a.custom?"autocomplete":a.many?"drop-down-list":"radio-group";i("field:"+r,{hints:"copy"},l,o,n)})}e.module("fields").directive("fieldChoice",i),i.$inject=["$parse","directiveProxyService","hintParseService"]}(window.angular),function(e){"use strict";function i(e){return{restrict:"E",replace:!0,require:"ngModel",template:'<div><select class="field-fixed-list" size="{{ size }}" ng-options="choice.value as choice.title for choice in choices" ng-model="model.value" ng-change="onSelect()" multiple></select></div>',scope:{choices:"="},link:function(i,l,o,n){function c(){i.model.value=n.$viewValue}function a(){var e=i.model.value;n.$setViewValue(e),n.$setValidity("validSelection",r.optional||!!e.length)}var r=e.parse(o.hints,{multi:!1,optional:!1});i.model={value:null},n.$render=c,i.onSelect=a,c(),i.size=o.size||t}}}e.module("fields").directive("fieldMultiselectFixedList",i);var t=8;i.$inject=["hintParseService"]}(window.angular),function(e){"use strict";function i(){var e=0;return{restrict:"E",replace:!0,require:"ngModel",template:'<div class="field-radio-group field-choicebox-group"><input type="checkbox" style="display: none;"><label class="radio-item choicebox-item" ng-repeat="choice in choices"><input class="radio-box choicebox-box" type="radio" ng-value="choice.value" ng-attr-name="{{ groupName }}" ng-model="model.value"><span class="radio-label choicebox-label">{{ choice.title }}</span></label></div>',scope:{choices:"=",name:"@"},link:function(i,t,l,o){function n(){i.model.value=o.$viewValue}function c(){o.$setViewValue(i.model.value)}i.model={value:null},o.$render=n,i.$watch("model.value",c),n(),i.groupName="field-radio-group-"+e++}}}e.module("fields").directive("fieldRadioGroup",i)}(window.angular),function(e){"use strict";function i(){function e(e,t){var o=i(e.hints,t);return e.hints=l(o),o}function i(e,i){var t="not ";return _((e||"").toLowerCase().split(",")).chain().map(function(e){e=e.trim();var i=e.substr(0,t.length)===t;return i&&(e=e.substr(t.length)),[e,!i]}).object().defaults(i||{}).value()}function l(e){return _(e).filter(function(e,i){return i.length>0}).map(function(e,i){return(e?"":t)+i}).join(",")}return{process:e,parse:i,stringify:l}}e.module("fields").factory("hintParseService",i);var t="not "}(window.angular),function(e){"use strict";function i(e){return{restrict:"E",replace:!0,require:"ngModel",template:'<div><select class="field-fixed-list" size="{{ size }}" ng-options="choice.value as choice.title for choice in choices" ng-model="model.value" ng-change="onSelect()"></select></div>',scope:{choices:"="},link:function(i,l,o,n){function c(){i.model.value=n.$viewValue}function a(){var e=i.model.value;n.$setViewValue(e),n.$setValidity("validSelection",r.optional||null!==e)}var r=e.parse(o.hints,{multi:!1,optional:!1});console.log(o.hints,r),i.model={value:null},n.$render=c,i.onSelect=a,c(),i.size=o.size||t}}}e.module("fields").directive("fieldFixedList",i);var t=8;i.$inject=["hintParseService"]}(window.angular),function(e){"use strict";function i(){return{restrict:"E",replace:!0,template:'<select class="field-drop-down-list" ng-options="choice.value as choice.title for choice in choices"></select>',scope:{choices:"="}}}e.module("fields").directive("fieldDropDownList",i)}(window.angular),function(e){"use strict";function i(){return{restrict:"E",replace:!0,require:"ngModel",template:'<div class="field-checkbox-group field-choicebox-group"><input type="checkbox" style="display: none;"><label class="checkbox-item choicebox-item" ng-repeat="choice in choices" ng-init="index = $index"><input class="checkbox-box choicebox-box" type="checkbox" ng-change="onChange()" ng-model="model.value[index]" ng-true-value="1" ng-false-value="0" ng-checked="1*model.value[index]"><span class="checkbox-label choicebox-label">{{ choice.title }}</span></label></div>',scope:{choices:"="},link:function(e,i,t,l){function o(){var i=l.$viewValue;e.model.value=new Array(e.choices.length);for(var t=0;t<e.choices.length;t++)e.model.value[t]=_(i).contains(e.choices[t].value)}function n(){for(var i=l.$viewValue;i.length;)i.pop();e.model.value.forEach(function(t,l){1*t&&i.push(e.choices[l].value)}),l.$setViewValue(i)}e.model={value:[]},l.$render=o,e.onChange=n,o()}}}e.module("fields").directive("fieldCheckboxGroup",i)}(window.angular),function(e){"use strict";function i(i){return i.generateDirective("label",function(t,l,o){var n=o.purpose,c=o.title;if(l.addClass("field").addClass("field-"+n+"-container").append(e.element("<div/>").addClass("field-label").text(c)),"auto"===n)throw new Error('Field purpose cannot be "auto"');i("field:"+n,["purpose"],t,l,o).addClass("field-"+n)})}e.module("fields").directive("field",i).directive("fieldAuto",i),i.$inject=["directiveProxyService"]}(window.angular),function(e){"use strict";function i(){return{restrict:"E",replace:!0,template:'<input class="field-text-box" type="text">'}}e.module("fields").directive("fieldTextBox",i)}(window.angular);